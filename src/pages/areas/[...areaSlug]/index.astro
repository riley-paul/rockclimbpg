---
import AreaTable from "@/components/AreaTable.astro";
import Layout from "@/layouts/Layout.astro";
import PageHeaderContainer from "@/layouts/PageHeaderContainer.astro";
import type { ContentEntryType, GetStaticPaths } from "astro";
import { getCollection, type CollectionEntry } from "astro:content";

import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

import { Map } from "@/components/Map";

export const getStaticPaths: GetStaticPaths = async () => {
  const climbingAreas = await getCollection("climbingAreas");
  return climbingAreas.map((entry) => ({
    params: { areaSlug: entry.slug },
    props: { entry },
  }));
};

interface Props {
  entry: CollectionEntry<"climbingAreas">;
}

const { entry } = Astro.props;
const { Content } = await entry.render();

const climbingRoutes = await getCollection(
  "climbingRoutes",
  ({ data }) => data.area.slug === entry.slug
);
---

<Layout>
  <PageHeaderContainer>
    <h1>{entry.data.title}</h1>
  </PageHeaderContainer>
  <!-- <Map
    client:only
    markers={[
      {
        popup: entry.data.title,
        position: [entry.data.latitude, entry.data.longitude],
      },
    ]}
  /> -->
  <div class="grid gap-4">
    <Card>
      <AreaTable entry={entry} />
    </Card>
    <Card>
      <div class="prose dark:prose-invert max-w-none p-6">
        <Content />
      </div>
    </Card>
    <div class="prose dark:prose-invert max-w-none">
      {
        climbingRoutes.length > 0 && (
          <>
            <h2>Routes</h2>
            <ol>
              {climbingRoutes.map((route) => (
                <li>
                  <a href={`/areas/${entry.slug}/routes/${route.slug}`}>
                    {route.data.title}
                  </a>
                </li>
              ))}
            </ol>
          </>
        )
      }
    </div>
  </div>
</Layout>
